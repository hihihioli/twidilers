# the developer compose file
services:
  web: #the website
    build: . #Build current directory
    command: ["gunicorn","-w","12","-b","0.0.0.0:5000","twidilers:create_app()"] #Run the flask developer command
    environment:
      - FLASK_SQLALCHEMY_DATABASE_URI=postgresql://postgres:postgres@db:5432/db #The url for the database in the flask app
    depends_on: #A healthy database
      db:
        condition: service_healthy 
    links: # not required but links it to the db
      - db
    volumes:
      - ./:/app/ # links the current directory so the flask auto-reloader works at run-time
  db: #The database
    image: postgres #pull from most recent postgres
    volumes:
      - ./pData/:/var/lib/postgresql/data #Link the postgres data to the pData directory for data persistence accross containers
    environment: #some postgres-specific env vars
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=db
    healthcheck: #tells the website whether the database is ready to startup
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 3s #How often to check
      timeout: 10s #How long it has to respond
      retries: 10 #How many retries it has
      start_period: 1s #The delay after starting to check
  nginx:
    image: nginx:latest
    ports:
      - 80:80
      - 443:443
    restart: always
    environment:
      - DOMAIN=twidilers.com
      - EMAIL=olivermandel123@gmail.com
    volumes:
      - ./nginx/:/etc/nginx/conf.d/:ro
      - ./certbot/www/:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro
  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
      - ./certbot/init_certbot.sh:/init_certbot.sh:ro
    entrypoint: ["sh", "/init_certbot.sh"]
    command: "trap exit TERM; while :; do sleep 12h & wait $!; certbot renew; done"